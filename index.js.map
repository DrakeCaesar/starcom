{"version":3,"file":"index.js","sources":["../src/factions.ts","../src/colorConstants.ts","../src/getColor.ts","../src/index.ts"],"sourcesContent":["interface CommodityPrices {\n  sell: number;\n\n  buy: number;\n  sellPercent?: number;\n  buyPercent?: number;\n}\n\ninterface Faction {\n  currency: string; // Add currency here\n  commodities: {\n    [commodity: string]: CommodityPrices;\n  };\n}\n\ninterface Factions {\n  [factionName: string]: Faction;\n}\n\nexport const factions: Factions = {\n  \"Aquarian Colony\": {\n    currency: \"Platinum\",\n    commodities: {\n      Aluminum: { sell: 0.09, buy: 0.17 },\n      Copper: { sell: 0.13, buy: 0.24 },\n      Silver: { sell: 0.23, buy: 0.44 },\n      Titanium: { sell: 0.33, buy: 0.62 },\n      Yttrium: { sell: 0.56, buy: 1.07 },\n      Gold: { sell: 0.86, buy: 1.64 },\n      // Platinum is the currency\n      Uranium: { sell: 0.77, buy: 1.47 },\n      Iridium: { sell: 2.83, buy: 5.4 },\n      DiBeryllium: { sell: 2.67, buy: 5.09 },\n      Chiralite: { sell: 5.2, buy: 9.91 },\n      Neutronium: { sell: 6.95, buy: 13.24 },\n      Etherine: { sell: 9.78, buy: 18.64 },\n      Xenium: { sell: 14.49, buy: 27.61 },\n      Adamantine: { sell: 52.21, buy: 99.52 },\n    },\n  },\n  \"Asteroid Traders\": {\n    currency: \"Aluminum\",\n    commodities: {\n      // Aluminum is the currency\n      Copper: { sell: 1.11, buy: 2.24 },\n      Silver: { sell: 2.17, buy: 4.37 },\n      Titanium: { sell: 4.26, buy: 8.6 },\n      Yttrium: { sell: 4.58, buy: 9.23 },\n      Gold: { sell: 6.07, buy: 12.25 },\n      Platinum: { sell: 7.04, buy: 14.2 },\n      Uranium: { sell: 9.58, buy: 19.32 },\n      Iridium: { sell: 17.6, buy: 35.51 },\n      DiBeryllium: { sell: 32.87, buy: 66.32 },\n      Chiralite: { sell: 44.14, buy: 89.06 },\n      Neutronium: { sell: 63.14, buy: 127.8 },\n      Etherine: { sell: 102.4, buy: 206.5 },\n      Xenium: { sell: 191.0, buy: 385.4 },\n      Adamantine: { sell: 352.0, buy: 710.2 },\n    },\n  },\n  Brogidar: {\n    currency: \"Gold\",\n    commodities: {\n      Aluminum: { sell: 0.12, buy: 0.2 },\n      Copper: { sell: 0.17, buy: 0.26 },\n      Silver: { sell: 0.28, buy: 0.45 },\n      Titanium: { sell: 0.75, buy: 1.19 },\n      Yttrium: { sell: 0.65, buy: 1.02 },\n      // Gold is the currency\n      Platinum: { sell: 1.65, buy: 2.6 },\n      Uranium: { sell: 1.33, buy: 2.09 },\n      Iridium: { sell: 3.08, buy: 4.86 },\n      DiBeryllium: { sell: 4.48, buy: 7.06 },\n      Chiralite: { sell: 5.48, buy: 8.63 },\n      Neutronium: { sell: 9.52, buy: 15.01 },\n      Etherine: { sell: 13.44, buy: 21.19 },\n      Xenium: { sell: 19.91, buy: 31.39 },\n      Adamantine: { sell: 49.78, buy: 78.48 },\n    },\n  },\n  Goryr: {\n    currency: \"Silver\",\n    commodities: {\n      Aluminum: { sell: 0.28, buy: 0.45 },\n      Copper: { sell: 0.43, buy: 0.67 },\n      // Silver is the currency\n      Titanium: { sell: 1.59, buy: 2.51 },\n      Yttrium: { sell: 2.07, buy: 3.26 },\n      Gold: { sell: 3.45, buy: 5.44 },\n      Platinum: { sell: 4.09, buy: 6.44 },\n      Uranium: { sell: 3.66, buy: 5.78 },\n      Iridium: { sell: 10.07, buy: 15.88 },\n      DiBeryllium: { sell: 20.75, buy: 32.72 },\n      Chiralite: { sell: 25.58, buy: 40.33 },\n      Neutronium: { sell: 28.67, buy: 45.2 },\n      Etherine: { sell: 52.2, buy: 82.3 },\n      Xenium: { sell: 63.7, buy: 100.4 },\n      Adamantine: { sell: 144.2, buy: 227.3 },\n    },\n  },\n  \"Guild Traders\": {\n    currency: \"Iridium\",\n    commodities: {\n      Aluminum: { sell: 0.02, buy: 0.03 },\n      Copper: { sell: 0.05, buy: 0.08 },\n      Silver: { sell: 0.06, buy: 0.1 },\n      Titanium: { sell: 0.15, buy: 0.22 },\n      Yttrium: { sell: 0.23, buy: 0.35 },\n      Gold: { sell: 0.28, buy: 0.42 },\n      Platinum: { sell: 0.32, buy: 0.49 },\n      Uranium: { sell: 0.35, buy: 0.53 },\n      // Iridium is the currency\n      DiBeryllium: { sell: 2.03, buy: 3.08 },\n      Chiralite: { sell: 2.01, buy: 3.05 },\n      Neutronium: { sell: 3.23, buy: 4.9 },\n      Etherine: { sell: 6.67, buy: 10.11 },\n      Xenium: { sell: 9.5, buy: 14.41 },\n      Adamantine: { sell: 26.24, buy: 39.78 },\n    },\n  },\n  \"Island Traders\": {\n    currency: \"Silver\",\n    commodities: {\n      Aluminum: { sell: 0.45, buy: 0.71 },\n      Copper: { sell: 0.45, buy: 0.72 },\n      // Silver is the currency\n      Titanium: { sell: 2.03, buy: 3.21 },\n      Yttrium: { sell: 1.84, buy: 2.9 },\n      Gold: { sell: 2.92, buy: 4.6 },\n      Platinum: { sell: 3.5, buy: 5.51 },\n      Uranium: { sell: 4.33, buy: 6.82 },\n      Iridium: { sell: 9.25, buy: 14.58 },\n      DiBeryllium: { sell: 14.61, buy: 23.04 },\n      Chiralite: { sell: 20.55, buy: 32.39 },\n      Neutronium: { sell: 28.67, buy: 45.2 },\n      Etherine: { sell: 37.04, buy: 58.4 },\n      Xenium: { sell: 63.7, buy: 100.4 },\n      Adamantine: { sell: 159.3, buy: 251.1 },\n    },\n  },\n  Kyrnan: {\n    currency: \"Platinum\",\n    commodities: {\n      Aluminum: { sell: 0.1, buy: 0.15 },\n      Copper: { sell: 0.11, buy: 0.16 },\n      Silver: { sell: 0.2, buy: 0.31 },\n      Titanium: { sell: 0.45, buy: 0.68 },\n      Yttrium: { sell: 0.89, buy: 1.36 },\n      Gold: { sell: 0.65, buy: 0.99 },\n      // Platinum is the currency\n      Uranium: { sell: 0.81, buy: 1.23 },\n      Iridium: { sell: 2.38, buy: 3.6 },\n      DiBeryllium: { sell: 3.65, buy: 5.54 },\n      Chiralite: { sell: 4.47, buy: 6.77 },\n      Neutronium: { sell: 7.31, buy: 11.08 },\n      Etherine: { sell: 10.96, buy: 16.62 },\n      Xenium: { sell: 18.59, buy: 28.19 },\n      Adamantine: { sell: 51.15, buy: 77.56 },\n    },\n  },\n  Nimion: {\n    currency: \"Gold\",\n    commodities: {\n      Aluminum: { sell: 0.12, buy: 0.17 },\n      Copper: { sell: 0.23, buy: 0.33 },\n      Silver: { sell: 0.28, buy: 0.39 },\n      Titanium: { sell: 0.54, buy: 0.76 },\n      Yttrium: { sell: 0.75, buy: 1.05 },\n      // Gold is the currency\n      Platinum: { sell: 0.82, buy: 1.16 },\n      Uranium: { sell: 1.8, buy: 2.54 },\n      Iridium: { sell: 6.56, buy: 9.23 },\n      DiBeryllium: { sell: 5.43, buy: 7.64 },\n      Chiralite: { sell: 8.66, buy: 12.17 },\n      Neutronium: { sell: 9.71, buy: 13.65 },\n      Etherine: { sell: 14.23, buy: 20.01 },\n      Xenium: { sell: 21.08, buy: 29.65 },\n      Adamantine: { sell: 63.4, buy: 89.16 },\n    },\n  },\n  Wiskamug: {\n    currency: \"Yttrium\",\n    commodities: {\n      Aluminum: { sell: 0.1, buy: 0.16 },\n      Copper: { sell: 0.21, buy: 0.33 },\n      Silver: { sell: 0.35, buy: 0.53 },\n      Titanium: { sell: 0.73, buy: 1.1 },\n      // Yttrium is the currency\n      Gold: { sell: 1.1, buy: 1.67 },\n      Platinum: { sell: 1.78, buy: 2.69 },\n      Uranium: { sell: 1.78, buy: 2.7 },\n      Iridium: { sell: 3.41, buy: 5.17 },\n      DiBeryllium: { sell: 5.62, buy: 8.53 },\n      Chiralite: { sell: 8.81, buy: 13.36 },\n      Neutronium: { sell: 13.72, buy: 20.8 },\n      Etherine: { sell: 19.99, buy: 30.32 },\n      Xenium: { sell: 36.02, buy: 54.63 },\n      Adamantine: { sell: 62.47, buy: 94.72 },\n    },\n  },\n};\n","// Define the data intervals for both gradients\nexport const gradient1Range = { min: -51, max: 127 };\nexport const gradient2Range = { min: -24, max: 224 };\n\n// Polynomial coefficients for Gradient 1 (Order 13)\nexport const hueCoeffs1 = [\n  1.08e-24, -1.6458e-21, 5.9792e-19, -7.1754e-17, -1.903e-15, 9.9128e-13,\n  -3.7434e-11, -4.4037e-9, 2.6251e-7, 8.3536e-6, -5.3593e-4, -5.645e-3, 1.3851,\n  6.4608e1,\n];\n\nexport const saturationCoeffs1 = [\n  3.9025e-23, -1.8541e-20, 2.5993e-18, 3.6865e-17, -3.3682e-14, 1.259e-12,\n  1.5231e-10, -7.5495e-9, -3.2445e-7, 1.3969e-5, 3.0625e-4, -7.7753e-3,\n  -9.9559e-2, 1.0018e2,\n];\n\nexport const lightnessCoeffs1 = [\n  -8.7953e-24, 4.2243e-21, -6.1954e-19, -3.3505e-18, 8.2969e-15, -4.6545e-13,\n  -3.4206e-11, 3.3665e-9, 4.3884e-8, -9.7411e-6, -3.8164e-6, 1.3902e-2,\n  -6.1203e-3, 4.7244e1,\n];\n\n// Polynomial coefficients for Gradient 2 (Order 13)\nexport const hueCoeffs2 = [\n  -5.153e-28, 6.8154e-25, -3.1043e-22, 3.6092e-20, 1.3242e-17, -3.7569e-15,\n  -4.9566e-14, 9.5761e-11, -3.9227e-9, -1.1084e-6, 5.9165e-5, 9.1471e-3, -1.214,\n  2.4478e2,\n];\n\nexport const saturationCoeffs2 = [\n  2.2966e-29, -3.3799e-26, 1.7011e-23, -2.2155e-21, -7.9369e-19, 2.2702e-16,\n  9.2765e-15, -6.3305e-12, -2.8724e-11, 7.9759e-8, 5.4664e-7, -5.8315e-4,\n  1.8896e-2, 9.9931e1,\n];\n\nexport const lightnessCoeffs2 = [\n  -1.3279e-29, -1.2895e-26, 3.0892e-23, -1.6192e-20, 2.3427e-18, 5.2936e-16,\n  -1.8137e-13, 3.5198e-12, 3.5782e-9, -2.637e-7, -2.715e-5, 3.3561e-3,\n  -7.3413e-3, 5.0195e1,\n];\n","import { gradient1Range, gradient2Range, hueCoeffs1, hueCoeffs2, saturationCoeffs1, saturationCoeffs2, lightnessCoeffs1, lightnessCoeffs2 } from \"./colorConstants\";\n\nexport function getColor(x: number, useGradient1: boolean): string {\n  // Function to evaluate the polynomial using Horner's method\n  function evaluatePolynomial(coeffs: number[], x: number): number {\n    return coeffs.reduce((acc, coeff) => acc * x + coeff, 0);\n  }\n\n  // Constrain x to the interval of the selected gradient\n  const gradientRange = useGradient1 ? gradient1Range : gradient2Range;\n  x = Math.max(gradientRange.min, Math.min(gradientRange.max, x));\n\n  // Compute HSL values based on the selected gradient\n  const hueCoeffs = useGradient1 ? hueCoeffs1 : hueCoeffs2;\n  const saturationCoeffs = useGradient1 ? saturationCoeffs1 : saturationCoeffs2;\n  const lightnessCoeffs = useGradient1 ? lightnessCoeffs1 : lightnessCoeffs2;\n\n  let h = evaluatePolynomial(hueCoeffs, x);\n  let s = evaluatePolynomial(saturationCoeffs, x);\n  let l = evaluatePolynomial(lightnessCoeffs, x);\n\n  // Rotate the hue by 180 degrees\n  if (!useGradient1) {\n    h = (h + 180) % 360;\n  }\n\n  // Ensure HSL values are within valid ranges\n  h = ((h % 360) + 360) % 360; // Wrap hue to [0, 360)\n  s = Math.max(0, Math.min(100, s)); // Clamp saturation to [0, 100]\n  l = Math.max(0, Math.min(100, l)); // Clamp lightness to [0, 100]\n\n  // Convert HSL to RGB\n  function hslToRgb(\n    h: number,\n    s: number,\n    l: number,\n  ): { r: number; g: number; b: number } {\n    s /= 100;\n    l /= 100;\n    const c = (1 - Math.abs(2 * l - 1)) * s;\n    const hPrime = h / 60;\n    const x = c * (1 - Math.abs((hPrime % 2) - 1));\n    let r1 = 0,\n      g1 = 0,\n      b1 = 0;\n\n    if (0 <= hPrime && hPrime < 1) {\n      r1 = c;\n      g1 = x;\n    } else if (1 <= hPrime && hPrime < 2) {\n      r1 = x;\n      g1 = c;\n    } else if (2 <= hPrime && hPrime < 3) {\n      g1 = c;\n      b1 = x;\n    } else if (3 <= hPrime && hPrime < 4) {\n      g1 = x;\n      b1 = c;\n    } else if (4 <= hPrime && hPrime < 5) {\n      r1 = x;\n      b1 = c;\n    } else if (5 <= hPrime && hPrime < 6) {\n      r1 = c;\n      b1 = x;\n    }\n\n    const m = l - c / 2;\n    const r = Math.round((r1 + m) * 255);\n    const g = Math.round((g1 + m) * 255);\n    const b = Math.round((b1 + m) * 255);\n\n    return { r, g, b };\n  }\n\n  // Convert RGB to Hexadecimal string\n  function rgbToHex(r: number, g: number, b: number): string {\n    return (\n      \"#\" +\n      [r, g, b]\n        .map((x) => {\n          const hex = x.toString(16);\n          return hex.length === 1 ? \"0\" + hex : hex;\n        })\n        .join(\"\")\n    );\n  }\n\n  const { r, g, b } = hslToRgb(h, s, l);\n  return rgbToHex(r, g, b);\n}\n","import { factions } from \"./factions\";\nimport { getColor } from \"./getColor\";\nimport \"./styles.scss\";\n\n// Commodities and conversion rates (Aluminum = 1.0)\n\nconst commodityRates: { [key: string]: number } = {\n  Aluminum: 1.0,\n  Copper: 1.5,\n  Silver: 2.5,\n  Titanium: 5.0,\n  Yttrium: 6.5,\n  Gold: 8.0,\n  Platinum: 10.0,\n  Uranium: 11.5,\n  Iridium: 25.0,\n  DiBeryllium: 45.0,\n  Chiralite: 55.0,\n  Neutronium: 90.0,\n  Etherine: 135.0,\n  Xenium: 200.0,\n  Adamantine: 500.0,\n};\n\nconsole.clear();\n\nrecommendTradeRoutes();\n\nfunction recommendTradeRoutes() {\n  const tableBody = document.querySelector(\"#tradeRoutes tbody\");\n  if (tableBody) {\n    tableBody.innerHTML = \"\"; // Clear previous routes\n  }\n\n  // Array to store all trade combinations\n  const allTradeRoutes = [];\n\n  // Iterate through each faction to get all trade combinations\n  for (const buyFactionName in factions) {\n    const buyFactionData = factions[buyFactionName];\n    const buyCurrencyRate = commodityRates[buyFactionData.currency];\n\n    for (const sellFactionName in factions) {\n      if (buyFactionName === sellFactionName) continue; // Skip if the buy and sell factions are the same\n\n      const sellFactionData = factions[sellFactionName];\n      const sellCurrencyRate = commodityRates[sellFactionData.currency];\n\n      for (const commodity in commodityRates) {\n        const buyTradeData = buyFactionData.commodities[commodity];\n        const sellTradeData = sellFactionData.commodities[commodity];\n\n        if (!buyTradeData || !sellTradeData) continue; // Skip if no trade data for the commodity\n\n        // Correctly use sell price for buying and buy price for selling\n        const buyInAluminum = sellTradeData.buy * sellCurrencyRate;\n        const sellInAluminum = buyTradeData.sell * buyCurrencyRate;\n\n        // Calculate profit percentage\n        const profitPercentage =\n          ((sellInAluminum - buyInAluminum) / buyInAluminum) * 100;\n\n        // Store the trade combination with calculated profit\n        allTradeRoutes.push({\n          commodity,\n          bestBuyFaction: buyFactionName,\n          bestBuyPrice: sellInAluminum,\n          bestBuyPriceOG: buyTradeData.sell,\n          bestBuyCurrency: buyFactionData.currency,\n          bestBuyPercentage:\n            (sellInAluminum / commodityRates[commodity] - 1) * 100,\n          bestSellFaction: sellFactionName,\n          bestSellPrice: buyInAluminum,\n          bestSellPriceOG: sellTradeData.buy,\n          bestSellCurrency: sellFactionData.currency,\n          bestSellPercentage:\n            (buyInAluminum / commodityRates[commodity] - 1) * 100,\n          profitPercentage,\n        });\n      }\n    }\n  }\n\n  // Sort all trade routes by profit percentage in descending order\n  allTradeRoutes.sort((a, b) => b.profitPercentage - a.profitPercentage);\n\n  let totalTime = 0;\n\n  // Now display the sorted trade routes\n  allTradeRoutes.forEach((tradeInfo, index) => {\n    const profit =\n      tradeInfo.profitPercentage > 0\n        ? `+${tradeInfo.profitPercentage.toFixed(2)}%`\n        : `${tradeInfo.profitPercentage.toFixed(2)}%`;\n\n    // Measure time for getColor calls\n    let startTime = Date.now();\n    const sellPercentageColor = getColor(tradeInfo.bestSellPercentage, false);\n    let endTime = Date.now();\n    totalTime += endTime - startTime;\n\n    startTime = Date.now();\n    const buyPercentageColor = getColor(tradeInfo.bestBuyPercentage, true);\n    endTime = Date.now();\n    totalTime += endTime - startTime;\n\n    startTime = Date.now();\n    const profitPercentageColor = getColor(tradeInfo.profitPercentage, false);\n    endTime = Date.now();\n    totalTime += endTime - startTime;\n\n    // If it's the last iteration, print the total time\n    if (index === allTradeRoutes.length - 1) {\n      console.log(`Total time taken for getColor calls: ${totalTime} ms`);\n    }\n    const row = `<tr>\n        <td>${tradeInfo.commodity}</td>\n        \n        <td class=\"currency\" style=\"background-image: url('./images/commodities/${\n          tradeInfo.commodity\n        }.png');\"></td>\n        <td class=\"empty\"></td>\n  \n        <!-- Sell Info Columns -->\n        <td>${tradeInfo.bestSellFaction}</td>\n        <td class=\"avatar\" style=\"background-image: url('./images/avatars/${\n          tradeInfo.bestSellFaction\n        }.png');\"></td>\n        <td class=\"currency\" style=\"background-image: url('./images/commodities/${\n          tradeInfo.bestSellCurrency\n        }.png');\"></td>\n        <td class=\"left-align-right\">${tradeInfo.bestSellPriceOG.toFixed(\n          2,\n        )}</td>\n        <td class=\"left-align-right\" style=\"color: ${sellPercentageColor};\">\n          ${tradeInfo.bestSellPercentage.toFixed(0)}%\n        </td>\n        <td class=\"empty\"></td>\n  \n        <!-- Buy Info Columns -->\n        <td>${tradeInfo.bestBuyFaction}</td>\n        <td class=\"avatar\" style=\"background-image: url('./images/avatars/${\n          tradeInfo.bestBuyFaction\n        }.png');\"></td>\n        <td class=\"left-align-right\">${tradeInfo.bestBuyPriceOG.toFixed(2)}</td>\n        <td class=\"currency\" style=\"background-image: url('./images/commodities/${\n          tradeInfo.bestBuyCurrency\n        }.png');\"></td>\n        <td class=\"left-align-right\" style=\"color: ${buyPercentageColor};\">\n          ${tradeInfo.bestBuyPercentage.toFixed(0)}%\n        </td>\n        <td class=\"empty\"></td>\n  \n        <!-- Profit Column -->\n        <td class=\"left-align-right\" style=\"color: ${profitPercentageColor};\">\n          ${profit}\n        </td>\n     </tr>`;\n    tableBody?.insertAdjacentHTML(\"beforeend\", row);\n  });\n}\n"],"names":["factions","gradient1Range","gradient2Range","hueCoeffs1","saturationCoeffs1","lightnessCoeffs1","hueCoeffs2","saturationCoeffs2","lightnessCoeffs2","getColor","x","useGradient1","evaluatePolynomial","coeffs","acc","coeff","gradientRange","hueCoeffs","saturationCoeffs","lightnessCoeffs","h","s","l","hslToRgb","c","hPrime","r1","g1","b1","m","r","g","b","rgbToHex","hex","commodityRates","recommendTradeRoutes","tableBody","allTradeRoutes","buyFactionName","buyFactionData","buyCurrencyRate","sellFactionName","sellFactionData","sellCurrencyRate","commodity","buyTradeData","sellTradeData","buyInAluminum","sellInAluminum","profitPercentage","a","totalTime","tradeInfo","index","profit","startTime","sellPercentageColor","endTime","buyPercentageColor","profitPercentageColor","row"],"mappings":"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"}