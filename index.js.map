{"version":3,"file":"index.js","sources":["../src/factions.ts","../src/index.ts"],"sourcesContent":["interface CommodityPrices {\n  sell: number;\n\n  buy: number;\n  sellPercent?: number;\n  buyPercent?: number;\n}\n\ninterface Faction {\n  currency: string; // Add currency here\n  commodities: {\n    [commodity: string]: CommodityPrices;\n  };\n}\n\ninterface Factions {\n  [factionName: string]: Faction;\n}\n\nexport const factions: Factions = {\n  \"Aquarian Colony\": {\n    currency: \"Platinum\",\n    commodities: {\n      Aluminum: { sell: 0.09, buy: 0.17 },\n      Copper: { sell: 0.13, buy: 0.24 },\n      Silver: { sell: 0.23, buy: 0.44 },\n      Titanium: { sell: 0.33, buy: 0.62 },\n      Yttrium: { sell: 0.56, buy: 1.07 },\n      Gold: { sell: 0.86, buy: 1.64 },\n      // Platinum is the currency\n      Uranium: { sell: 0.77, buy: 1.47 },\n      Iridium: { sell: 2.83, buy: 5.4 },\n      DiBeryllium: { sell: 2.67, buy: 5.09 },\n      Chiralite: { sell: 5.2, buy: 9.91 },\n      Neutronium: { sell: 6.95, buy: 13.24 },\n      Etherine: { sell: 9.78, buy: 18.64 },\n      Xenium: { sell: 14.49, buy: 27.61 },\n      Adamantine: { sell: 52.21, buy: 99.52 },\n    },\n  },\n  \"Asteroid Traders\": {\n    currency: \"Aluminum\",\n    commodities: {\n      // Aluminum is the currency\n      Copper: { sell: 1.11, buy: 2.24 },\n      Silver: { sell: 2.17, buy: 4.37 },\n      Titanium: { sell: 4.26, buy: 8.6 },\n      Yttrium: { sell: 4.58, buy: 9.23 },\n      Gold: { sell: 6.07, buy: 12.25 },\n      Platinum: { sell: 7.04, buy: 14.2 },\n      Uranium: { sell: 9.58, buy: 19.32 },\n      Iridium: { sell: 17.6, buy: 35.51 },\n      DiBeryllium: { sell: 32.87, buy: 66.32 },\n      Chiralite: { sell: 44.14, buy: 89.06 },\n      Neutronium: { sell: 63.14, buy: 127.8 },\n      Etherine: { sell: 102.4, buy: 206.5 },\n      Xenium: { sell: 191.0, buy: 385.4 },\n      Adamantine: { sell: 352.0, buy: 710.2 },\n    },\n  },\n  Brogidar: {\n    currency: \"Gold\",\n    commodities: {\n      Aluminum: { sell: 0.12, buy: 0.2 },\n      Copper: { sell: 0.17, buy: 0.26 },\n      Silver: { sell: 0.28, buy: 0.45 },\n      Titanium: { sell: 0.75, buy: 1.19 },\n      Yttrium: { sell: 0.65, buy: 1.02 },\n      // Gold is the currency\n      Platinum: { sell: 1.65, buy: 2.6 },\n      Uranium: { sell: 1.33, buy: 2.09 },\n      Iridium: { sell: 3.08, buy: 4.86 },\n      DiBeryllium: { sell: 4.48, buy: 7.06 },\n      Chiralite: { sell: 5.48, buy: 8.63 },\n      Neutronium: { sell: 9.52, buy: 15.01 },\n      Etherine: { sell: 13.44, buy: 21.19 },\n      Xenium: { sell: 19.91, buy: 31.39 },\n      Adamantine: { sell: 49.78, buy: 78.48 },\n    },\n  },\n  Goryr: {\n    currency: \"Silver\",\n    commodities: {\n      Aluminum: { sell: 0.28, buy: 0.45 },\n      Copper: { sell: 0.43, buy: 0.67 },\n      // Silver is the currency\n      Titanium: { sell: 1.59, buy: 2.51 },\n      Yttrium: { sell: 2.07, buy: 3.26 },\n      Gold: { sell: 3.45, buy: 5.44 },\n      Platinum: { sell: 4.09, buy: 6.44 },\n      Uranium: { sell: 3.66, buy: 5.78 },\n      Iridium: { sell: 10.07, buy: 15.88 },\n      DiBeryllium: { sell: 20.75, buy: 32.72 },\n      Chiralite: { sell: 25.58, buy: 40.33 },\n      Neutronium: { sell: 28.67, buy: 45.2 },\n      Etherine: { sell: 52.2, buy: 82.3 },\n      Xenium: { sell: 63.7, buy: 100.4 },\n      Adamantine: { sell: 144.2, buy: 227.3 },\n    },\n  },\n  \"Guild Traders\": {\n    currency: \"Iridium\",\n    commodities: {\n      Aluminum: { sell: 0.02, buy: 0.03 },\n      Copper: { sell: 0.05, buy: 0.08 },\n      Silver: { sell: 0.06, buy: 0.1 },\n      Titanium: { sell: 0.15, buy: 0.22 },\n      Yttrium: { sell: 0.23, buy: 0.35 },\n      Gold: { sell: 0.28, buy: 0.42 },\n      Platinum: { sell: 0.32, buy: 0.49 },\n      Uranium: { sell: 0.35, buy: 0.53 },\n      // Iridium is the currency\n      DiBeryllium: { sell: 2.03, buy: 3.08 },\n      Chiralite: { sell: 2.01, buy: 3.05 },\n      Neutronium: { sell: 3.23, buy: 4.9 },\n      Etherine: { sell: 6.67, buy: 10.11 },\n      Xenium: { sell: 9.5, buy: 14.41 },\n      Adamantine: { sell: 26.24, buy: 39.78 },\n    },\n  },\n  \"Island Traders\": {\n    currency: \"Silver\",\n    commodities: {\n      Aluminum: { sell: 0.45, buy: 0.71 },\n      Copper: { sell: 0.45, buy: 0.72 },\n      // Silver is the currency\n      Titanium: { sell: 2.03, buy: 3.21 },\n      Yttrium: { sell: 1.84, buy: 2.9 },\n      Gold: { sell: 2.92, buy: 4.6 },\n      Platinum: { sell: 3.5, buy: 5.51 },\n      Uranium: { sell: 4.33, buy: 6.82 },\n      Iridium: { sell: 9.25, buy: 14.58 },\n      DiBeryllium: { sell: 14.61, buy: 23.04 },\n      Chiralite: { sell: 20.55, buy: 32.39 },\n      Neutronium: { sell: 28.67, buy: 45.2 },\n      Etherine: { sell: 37.04, buy: 58.4 },\n      Xenium: { sell: 63.7, buy: 100.4 },\n      Adamantine: { sell: 159.3, buy: 251.1 },\n    },\n  },\n  Kyrnan: {\n    currency: \"Platinum\",\n    commodities: {\n      Aluminum: { sell: 0.1, buy: 0.15 },\n      Copper: { sell: 0.11, buy: 0.16 },\n      Silver: { sell: 0.2, buy: 0.31 },\n      Titanium: { sell: 0.45, buy: 0.68 },\n      Yttrium: { sell: 0.89, buy: 1.36 },\n      Gold: { sell: 0.65, buy: 0.99 },\n      // Platinum is the currency\n      Uranium: { sell: 0.81, buy: 1.23 },\n      Iridium: { sell: 2.38, buy: 3.6 },\n      DiBeryllium: { sell: 3.65, buy: 5.54 },\n      Chiralite: { sell: 4.47, buy: 6.77 },\n      Neutronium: { sell: 7.31, buy: 11.08 },\n      Etherine: { sell: 10.96, buy: 16.62 },\n      Xenium: { sell: 18.59, buy: 28.19 },\n      Adamantine: { sell: 51.15, buy: 77.56 },\n    },\n  },\n  Nimion: {\n    currency: \"Gold\",\n    commodities: {\n      Aluminum: { sell: 0.12, buy: 0.17 },\n      Copper: { sell: 0.23, buy: 0.33 },\n      Silver: { sell: 0.28, buy: 0.39 },\n      Titanium: { sell: 0.54, buy: 0.76 },\n      Yttrium: { sell: 0.75, buy: 1.05 },\n      // Gold is the currency\n      Platinum: { sell: 0.82, buy: 1.16 },\n      Uranium: { sell: 1.8, buy: 2.54 },\n      Iridium: { sell: 6.56, buy: 9.23 },\n      DiBeryllium: { sell: 5.43, buy: 7.64 },\n      Chiralite: { sell: 8.66, buy: 12.17 },\n      Neutronium: { sell: 9.71, buy: 13.65 },\n      Etherine: { sell: 14.23, buy: 20.01 },\n      Xenium: { sell: 21.08, buy: 29.65 },\n      Adamantine: { sell: 63.4, buy: 89.16 },\n    },\n  },\n  Wiskamug: {\n    currency: \"Yttrium\",\n    commodities: {\n      Aluminum: { sell: 0.1, buy: 0.16 },\n      Copper: { sell: 0.21, buy: 0.33 },\n      Silver: { sell: 0.35, buy: 0.53 },\n      Titanium: { sell: 0.73, buy: 1.1 },\n      // Yttrium is the currency\n      Gold: { sell: 1.1, buy: 1.67 },\n      Platinum: { sell: 1.78, buy: 2.69 },\n      Uranium: { sell: 1.78, buy: 2.7 },\n      Iridium: { sell: 3.41, buy: 5.17 },\n      DiBeryllium: { sell: 5.62, buy: 8.53 },\n      Chiralite: { sell: 8.81, buy: 13.36 },\n      Neutronium: { sell: 13.72, buy: 20.8 },\n      Etherine: { sell: 19.99, buy: 30.32 },\n      Xenium: { sell: 36.02, buy: 54.63 },\n      Adamantine: { sell: 62.47, buy: 94.72 },\n    },\n  },\n};\n","import { factions } from \"./factions\";\nimport \"./styles.scss\";\n\n// Commodities and conversion rates (Aluminum = 1.0)\n\nconst commodityRates: { [key: string]: number } = {\n  Aluminum: 1.0,\n  Copper: 1.5,\n  Silver: 2.5,\n  Titanium: 5.0,\n  Yttrium: 6.5,\n  Gold: 8.0,\n  Platinum: 10.0,\n  Uranium: 11.5,\n  Iridium: 25.0,\n  DiBeryllium: 45.0,\n  Chiralite: 55.0,\n  Neutronium: 90.0,\n  Etherine: 135.0,\n  Xenium: 200.0,\n  Adamantine: 500.0,\n};\n\nconsole.clear();\n\nrecommendTradeRoutes();\n\nfunction recommendTradeRoutes() {\n  const tableBody = document.querySelector(\"#tradeRoutes tbody\");\n  if (tableBody) {\n    tableBody.innerHTML = \"\"; // Clear previous routes\n  }\n\n  // Array to store all trade combinations\n  const allTradeRoutes: {\n    commodity: string;\n    bestBuyFaction: string;\n    bestBuyPrice: number;\n    bestBuyPriceOG: number;\n    bestBuyCurrency: string;\n    bestBuyPercentage: number;\n    bestSellFaction: string;\n    bestSellPrice: number;\n    bestSellPriceOG: number;\n    bestSellCurrency: string;\n    bestSellPercentage: number;\n    profitPercentage: number;\n  }[] = [];\n\n  // Iterate through each faction to get all trade combinations\n  for (const buyFactionName in factions) {\n    const buyFactionData = factions[buyFactionName];\n    const buyCurrencyRate = commodityRates[buyFactionData.currency];\n\n    for (const sellFactionName in factions) {\n      if (buyFactionName === sellFactionName) continue; // Skip if the buy and sell factions are the same\n\n      const sellFactionData = factions[sellFactionName];\n      const sellCurrencyRate = commodityRates[sellFactionData.currency];\n\n      for (const commodity in commodityRates) {\n        const buyTradeData = buyFactionData.commodities[commodity];\n        const sellTradeData = sellFactionData.commodities[commodity];\n\n        if (!buyTradeData || !sellTradeData) continue; // Skip if no trade data for the commodity\n\n        // Correctly use sell price for buying and buy price for selling\n        const buyInAluminum = sellTradeData.buy * sellCurrencyRate;\n        const sellInAluminum = buyTradeData.sell * buyCurrencyRate;\n\n        // Calculate profit percentage\n        const profitPercentage =\n          ((sellInAluminum - buyInAluminum) / buyInAluminum) * 100;\n\n        // Store the trade combination with calculated profit\n        allTradeRoutes.push({\n          commodity,\n          bestBuyFaction: buyFactionName,\n          bestBuyPrice: sellInAluminum,\n          bestBuyPriceOG: buyTradeData.sell, // Update to reflect the correct original price\n          bestBuyCurrency: buyFactionData.currency,\n          bestBuyPercentage:\n            (sellInAluminum / commodityRates[commodity] - 1) * 100,\n          bestSellFaction: sellFactionName,\n          bestSellPrice: buyInAluminum,\n          bestSellPriceOG: sellTradeData.buy, // Update to reflect the correct original price\n          bestSellCurrency: sellFactionData.currency,\n          bestSellPercentage:\n            (buyInAluminum / commodityRates[commodity] - 1) * 100,\n          profitPercentage,\n        });\n      }\n    }\n  }\n\n  // Sort all trade routes by profit percentage in descending order\n  allTradeRoutes.sort((a, b) => b.profitPercentage - a.profitPercentage);\n\n  // Now display the sorted trade routes\n  allTradeRoutes.forEach((tradeInfo) => {\n    const profit =\n      tradeInfo.profitPercentage > 0\n        ? `+${tradeInfo.profitPercentage.toFixed(2)}%`\n        : `${tradeInfo.profitPercentage.toFixed(2)}%`;\n\n    const row = `<tr>\n        <td>${tradeInfo.commodity}</td>\n        \n        <td class=\"currency\" style=\"background-image: url('./images/commodities/${\n          tradeInfo.commodity\n        }.png');\"></td>\n        <td class=\"empty\"></td>\n  \n        \n        <!-- Sell Info Columns -->\n  \n        <td>${tradeInfo.bestSellFaction}</td>\n        \n        <td class=\"avatar\" style=\"background-image: url('./images/avatars/${\n          tradeInfo.bestSellFaction\n        }.png');\"></td>\n        \n        <!-- <td>${tradeInfo.bestSellCurrency}</td> -->\n         \n        \n        <td class=\"currency\" style=\"background-image: url('./images/commodities/${\n          tradeInfo.bestSellCurrency\n        }.png');\"></td>\n        \n        <td class=\"left-align-right\">${tradeInfo.bestSellPriceOG.toFixed(2)}</td>\n        \n        <td class=\"left-align-right\">${tradeInfo.bestSellPercentage.toFixed(0)}%</td>\n        \n        <td class=\"empty\"></td>\n        \n        \n  \n        <!-- Buy Info Columns -->\n        <td>${tradeInfo.bestBuyFaction}</td>\n        \n        <td class=\"avatar\" style=\"background-image: url('./images/avatars/${\n          tradeInfo.bestBuyFaction\n        }.png');\"></td>\n        \n        <!-- <td>${tradeInfo.bestBuyCurrency}</td> -->\n        \n        <td class=\"left-align-right\">${tradeInfo.bestBuyPriceOG.toFixed(2)}</td>\n        \n        <td class=\"currency\" style=\"background-image: url('./images/commodities/${\n          tradeInfo.bestBuyCurrency\n        }.png');\"></td>\n        \n        <td class=\"left-align-right\">${tradeInfo.bestBuyPercentage.toFixed(0)}%</td>\n        \n        <td class=\"empty\"></td>\n        \n        \n        <!-- Profit Column -->\n        <td class=\"left-align-right\">${profit}</td>\n     </tr>`;\n    tableBody?.insertAdjacentHTML(\"beforeend\", row);\n  });\n}\n"],"names":["factions","commodityRates","recommendTradeRoutes","tableBody","allTradeRoutes","buyFactionName","buyFactionData","buyCurrencyRate","sellFactionName","sellFactionData","sellCurrencyRate","commodity","buyTradeData","sellTradeData","buyInAluminum","sellInAluminum","profitPercentage","a","b","tradeInfo","profit","row"],"mappings":"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"}